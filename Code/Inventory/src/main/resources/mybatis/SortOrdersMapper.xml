<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.liuxh.mapper.SortOrdersMapper">

    <!--<select id="getProduct" resultType="cn.liuxh.model.Goods">-->
    <!--select id,name,format,code,number,site,time from product LIMIT 1;-->
    <!--</select>-->

    <select id="getAll" resultType="cn.liuxh.model.SortOrders">
        select * from SortOrders WHERE groupId = #{groupId} limit #{start},#{rows};
    </select>

    <select id="getAllSku" resultType="cn.liuxh.model.SortSku">
        select * from SortSku where orderName = #{orderName} AND grouId = #{groupId};
    </select>

    <select id="getAllSkuPage" resultType="cn.liuxh.model.SortSku">
        select SortSku.id,SortSku.orderName,SortSku.count,SortSku.productName
        ,SortSku.size,SortSku.location,SortSku.calculate,SortSku.seriesNo
        ,SortOrders.id AS oid from SortSku
        INNER JOIN SortOrders ON SortOrders.orderName = SortSku.orderName
        AND SortOrders.groupId = #{groupId} limit #{start},#{rows};
    </select>

    <select id="getAllSkuCountAndSort" resultType="cn.liuxh.model.SortSku">
        select SortSku.id,SortSku.orderName,SortSku.count,SortSku.productName
        ,SortSku.size,SortSku.location,SortSku.calculate,SortSku.seriesNo,
        goods.LocationNo,SortSku.groupId
         from SortSku
         Left JOIN goods ON SortSku.seriesNo = goods.seriesNo AND SortSku.groupId = #{groupId}
        where orderName = #{orderName}
        order by location asc,LocationNo asc
        limit #{start},#{rows};
    </select>


    <select id="getAllPickSku" resultType="cn.liuxh.model.PickSku">
        select *
        from pickSku INNER JOIN PickOrder ON PickOrder.id = pickSku.pickOrderId
        AND PickOrder.groupId = #{groupId}
        order by shortName asc,location asc,pickOrderId asc, pickSku.LocationNo asc
        limit #{start},#{rows};
    </select>

    <select id="selectPickSkuCount" resultType="java.lang.Integer">
        select count(*) from pickSku
        INNER JOIN PickOrder ON PickOrder.id = pickSku.pickOrderId
        AND PickOrder.groupId = #{groupId}
    </select>

    <select id="getAllPickLocations" resultType="java.lang.String">
        select location
        FROM PickOrder
        where location is not null and location != ''
        group by location
        order by location asc;
    </select>

    <select id="count" resultType="java.lang.Integer">
        select count(*) from SortOrders WHERE groupId = #{groupId};
    </select>

    <select id="selectSkUCount" resultType="java.lang.Integer">
        select count(*) from pickSku
        INNER JOIN PickOrder ON PickOrder.id = pickSku.pickOrderId
        AND PickOrder.groupId = #{groupId}
    </select>

    <select id="haveGoods" resultType="java.lang.Integer">
        select count(*) from goods where seriesNo=#{seriesNo} AND groupId = #{groupId};
    </select>

    <select id="selectPickOrderCount" resultType="java.lang.Integer">
        select count(*) from PickOrder WHERE groupId = #{groupId};
    </select>



    <select id="getDetailById" resultType="cn.liuxh.model.SortOrders">
        select * from SortOrders where id = #{id};
    </select>

    <select id="getDetailByLocationNo" resultType="cn.liuxh.model.SortOrders">
        select * from SortOrders where locationNo = #{id};
    </select>

    <select id="getSkus" resultType="cn.liuxh.model.SortOrders">
        select * from SortSku where orderId = #{orderId};
    </select>

    <select id="getPickOrderDetailById" resultType="cn.liuxh.model.PickOrder">
        select * from PickOrder where id = #{id};
    </select>

    <select id="getUnPickOrder" parameterType="cn.liuxh.model.PickOrder"
            resultType="cn.liuxh.model.PickOrder">
        select * from PickOrder
        where shortName = #{shortName} AND location = #{location} AND pickState = 1 AND state != 1
        limit 1;
    </select>

    <select id="getAllPickOrders" resultType="cn.liuxh.model.PickOrder">
        select * from PickOrder where id != 0
        <if test="state == 1">
            AND state = 0 AND lockUserId = 0
        </if>
        <if test="state == 2">
            AND state = 1
        </if>
        <if test="state == 3">
            AND state = 0 AND lockUserId != 0
        </if>
        <if test="state == 4">
            AND state = 0
        </if>
        <if test="location != null and location != '' ">
            AND location = #{location}
        </if>
        limit #{start},#{rows};
    </select>

    <select id="getPickOrdersCount" resultType="java.lang.Integer">
        select count(*) from PickOrder where id != 0
        <if test="state == 1">
            AND state = 0 AND lockUserId = 0
        </if>
        <if test="state == 2">
            AND state = 1
        </if>
        <if test="state == 3">
            AND state = 0 AND lockUserId != 0
        </if>
        <if test="state == 4">
            AND state = 0
        </if>
        <if test="location != null and location != '' ">
            AND location = #{location}
        </if>
    </select>

    <select id="getSetting">
        select value FROM setting
        WHERE name = #{key} AND groupId = #{groupId}
    </select>

    <select id="getAllPickSkus" resultType="cn.liuxh.model.PickSku">
        select pickSku.id,pickSku.productName
        ,pickSku.size,pickSku.locationNo
        ,pickSku.count,pickSku.seriesNo,pickSku.pickOrderId
        ,goods.name,goods.remarks1,goods.remarks2 from pickSku
        Left JOIN goods ON pickSku.seriesNo = goods.seriesNo where pickOrderId = #{id};
    </select>

    <insert id="add" parameterType="cn.liuxh.model.SortOrders" useGeneratedKeys="true"
            keyProperty="id">
        insert into SortOrders(locationNo,orderName,time)
        values(#{locationNo},#{orderName},#{time})
    </insert>

    <insert id="addSku" parameterType="java.util.List">
        insert into SortSku (seriesNo,calculate,orderId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.seriesNo},#{item.calculate},#{item.orderId})
        </foreach>
    </insert>

    <insert id="adPickOrder" parameterType="cn.liuxh.model.PickOrder" useGeneratedKeys="true"
            keyProperty="id">
        insert into PickOrder(location,shortName,po,groupId)
        values(#{location},#{shortName},#{po},#{groupId})
    </insert>

    <insert id="addPickSkus" parameterType="java.util.List">
        insert into pickSku (productName,size,locationNo,seriesNo,
        count,pickOrderId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.productName},#{item.size},#{item.locationNo},#{item.seriesNo}
            ,#{item.count},#{item.pickOrderId})
        </foreach>
    </insert>


    <update id="updateSku" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" separator="" >
            update SortSku <set>
            calculate=#{item.calculate}
            </set> where id=#{item.id};
        </foreach>
    </update>

    <update id="updatePickSkus" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" separator="" >
            update pickSku <set>
            count=#{item.count}
        </set> where id=#{item.id};
        </foreach>
    </update>



    <!-- 更新的配置 -->
    <update id="update" parameterType="cn.liuxh.model.SortOrders">
        update LocationCheckOrders set
        orderName=#{orderName}
        where id=#{id}
    </update>

    <update id="updatePickOrderState" parameterType="int">
        update PickOrder set
        state=#{state}
        where id=#{id}
    </update>

    <update id="updatePickOrderPickState" parameterType="int">
        update PickOrder set
        pickState=#{state}
        where id=#{id}
    </update>

    <update id="lockPickOrderById" parameterType="int">
        update PickOrder set
        lockUserId=#{uid}
        where id=#{id}
    </update>

    <update id="setSetting">
        update setting set
        value=#{value}
        where name=#{key} AND groupId = #{groupId}
    </update>


    <!-- 删除配置 -->
    <delete id="delete" parameterType="int">
        delete from LocationCheckOrders where id=#{id};
    </delete>


    <!-- 删除配置 -->
    <delete id="deleteSku">
        delete from SortSku where orderName=#{orderName} AND groupId = #{groupId};
    </delete>

    <delete id="deletePickSku" parameterType="int">
        delete from pickSku where id=#{id};
    </delete>



    <insert id="importOrders" parameterType="cn.liuxh.model.SortOrders" useGeneratedKeys="true"
            keyProperty="id">
        insert into SortOrders(state,orderName,address,time,po,type,inTime,groupId)
        values(#{state},#{orderName},#{address},#{time},#{po},#{type},#{inTime},#{groupId})
        ON DUPLICATE KEY UPDATE state = #{state},address = #{address},po = #{po},type = #{type},inTime = #{inTime},groupId=#{groupId}
    </insert>

    <insert id="importSkus" parameterType="java.util.List">
        insert into SortSku(orderName,seriesNo,calculate,count,productName,size,location,shipped,unShipped,goodNo,groupId)
        values
        <foreach collection="list" item="item" index="index" open="" close="" separator=",">
            (#{item.orderName},#{item.seriesNo},#{item.calculate},#{item.count},#{item.productName},#{item.size},#{item.location},#{item.shipped},#{item.unShipped},#{item.goodNo},#{item.groupId})
        </foreach>
    </insert>


    <!--<insert id="importOrders" parameterType="java.util.List" useGeneratedKeys="true"-->
            <!--keyProperty="id">-->
        <!--insert into SortOrders(state,orderName,address,time)-->
        <!--values-->
        <!--<foreach collection="list" item="item" index="index" open="" close="" separator=",">-->
            <!--(#{state},#{orderName},#{address},#{time})-->
        <!--</foreach>-->
        <!--ON DUPLICATE KEY UPDATE state=VALUES(state),address=VALUES(address),time=VALUES(time);-->
    <!--</insert>-->

    <delete id="truncate">
        DELETE from SortSku WHERE id != 0 AND groupId = #{groupId};
        DELETE from SortOrders WHERE id != 0 AND groupId = #{groupId};
        DELETE from PickOrder WHERE id != 0 AND groupId = #{groupId};
        DELETE from pickSku WHERE id != 0 AND groupId = #{groupId};
    </delete>

    <delete id="truncateSort">
        DELETE from SortSku WHERE id != 0 AND groupId = #{groupId};
        DELETE from SortOrders WHERE id != 0 AND groupId = #{groupId};
--         TRUNCATE TABLE SortSku;
--         TRUNCATE TABLE SortOrders;
    </delete>

</mapper>